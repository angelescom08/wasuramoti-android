#!/usr/bin/env python3

from subprocess import check_output
from pathlib import Path
import xml.etree.ElementTree as ET
from string import Template
from copy import copy
import yaml

ROOT_DIR = str(check_output("git rev-parse --show-toplevel", shell=True), 'utf-8').rstrip()
CUR_DIR = Path(__file__).parent

class GenThemeStyle:
  @classmethod
  def gen_style(cls, fn, theme):
    with open(fn) as f:
      isLight = theme['isLight']
      template = Template(f.read())
      data = copy(theme['colors'])
      data['name'] = theme['name']
      data['tag'] = theme['tag']
      data['parentTheme'] = 'Theme.AppCompat.Light' if isLight else 'Theme.AppCompat'
      data['parentPrefTheme'] = 'PreferenceFixTheme.Light' if isLight else 'PreferenceFixTheme'
      data['actionSettingsIcon'] = 'light_ic_action_settings' if isLight else 'ic_action_settings'
      data['parentActionBar'] = 'Widget.AppCompat.Light.ActionBar.Solid' if isLight else 'Widget.AppCompat.ActionBar.Solid'
    outfile = Path(fn).stem + '-theme-' + theme['tag'] + '.xml'
    outpath = Path(ROOT_DIR) / 'src/main/res/values' / outfile
    with open(outpath, 'w') as fout:
      fout.write(template.substitute(data))
      print("wrote: {}".format(outpath))

  @classmethod
  def gen_theme(cls, theme):
    for fn in (CUR_DIR/'template').glob('*.xml'):
      cls.gen_style(fn, theme)

  @classmethod
  def run(cls):
    for fn in (CUR_DIR/'theme').glob('*.yml'):
      with open(fn) as f:
        theme = yaml.load(f)
        cls.gen_theme(theme)


class GenThemeDrawable:
  # Android API < 21 does not support style attributes in drawable
  # https://stackoverflow.com/questions/8041537/how-to-reference-style-attributes-from-a-drawable/13471695#13471695
  # This class is for creating drawable for each theme
  DRAWABLE_DIR = 'src/main/res/drawable'
  @classmethod
  def aggregate_styles(cls):
    styles = {}
    for fn in (CUR_DIR/'theme').glob('*.yml'):
      with open(fn) as f:
        style = yaml.load(f)
        styles[style['tag']] = style['colors']
    return styles

  @classmethod
  def replace_attr(cls, table, tree):
    replaced = False
    for item in tree:
      for k, v in item.attrib.items():
        if v.startswith('?attr/'):
          attr = v[len('?attr/'):]
          newv = table[attr]
          item.set(k, newv)
          replaced = True
      if cls.replace_attr(table, item):
        replaced = True
    return replaced

  @classmethod
  def run(cls):
    styles = cls.aggregate_styles()
    path = Path(ROOT_DIR, cls.DRAWABLE_DIR)
    for fn in path.glob('*.xml'):
      for theme, table in styles.items():
        postfix = '_theme_' + theme + '.xml'
        tree = ET.parse(fn)
        if not cls.replace_attr(table, tree.getroot()):
          continue
        outfile = fn.with_name(fn.stem + postfix)
        with open(outfile, 'wb') as fout:
          header = '<!-- generated by {} from {} -->\n'.format(Path(__file__).name, fn.name)
          fout.write(bytes(header, 'utf-8'))
          tree.write(fout)
          print("wrote: {}".format(outfile))


if __name__ == '__main__':
  GenThemeStyle.run()
  GenThemeDrawable.run()
